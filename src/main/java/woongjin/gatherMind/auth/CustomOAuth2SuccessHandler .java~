package woongjin.gatherMind.auth;

import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.oauth2.core.user.DefaultOAuth2User;
import org.springframework.security.oauth2.core.OAuth2AuthenticationException;
import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;
import org.springframework.stereotype.Service;
import woongjin.gatherMind.entity.Member;
import woongjin.gatherMind.enums.CustomAuthProvider;
import woongjin.gatherMind.repository.MemberRepository;

import java.util.Map;
import java.util.Optional;
import java.util.UUID;

@Service
public class CustomOAuth2SuccessHandler  extends DefaultOAuth2UserService {

    private final MemberRepository memberRepository;

    public CustomOAuth2UserService(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }

    @Override
    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {
        OAuth2User oauth2User = super.loadUser(userRequest);

        // OAuth2 제공자 정보 추출
        String registrationId = userRequest.getClientRegistration().getRegistrationId().toUpperCase();
        CustomAuthProvider provider = CustomAuthProvider.valueOf(registrationId);

        // 사용자 정보 추출
        Map<String, Object> attributes = oauth2User.getAttributes();
        String oauthId = attributes.get("sub") != null ? attributes.get("sub").toString() : attributes.get("id").toString();
        String email = (String) attributes.get("email");
        String profileImage = (String) attributes.getOrDefault("picture", "/api/files/default-profile");

        // 데이터베이스에 사용자 확인 또는 UUID 부여
        Optional<Member> existingMember = memberRepository.findByOauthIdAndOauthProvider(oauthId);

        Member member;
        if (existingMember.isPresent()) {
            // 기존 사용자 업데이트
            member = existingMember.get();
            member.setEmail(email);
            member.setProfileImage(profileImage);
        } else {
            // 새로운 사용자 등록 (UUID 부여)
            member = new Member();
            member.setMemberId(UUID.randomUUID().toString()); // UUID 생성 및 설정
            member.setOauthId(oauthId);
            member.setOauthProvider(provider);
            member.setEmail(email);
            member.setProfileImage(profileImage);
        }

        // 사용자 정보 저장
        memberRepository.save(member);

        // DefaultOAuth2User 반환
        return new DefaultOAuth2User(
                oauth2User.getAuthorities(),
                attributes,
                "email" // Principal의 key 설정
        );
    }
}
