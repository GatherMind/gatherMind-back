package woongjin.gatherMind.service;

import io.jsonwebtoken.io.IOException;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import woongjin.gatherMind.entity.FileMetadata;
import woongjin.gatherMind.entity.Member;
import woongjin.gatherMind.entity.ProfileImageMapping;
import woongjin.gatherMind.exception.member.MemberNotFoundException;
import woongjin.gatherMind.repository.FileMetadataRepository;
import woongjin.gatherMind.repository.MemberRepository;
import woongjin.gatherMind.repository.ProfileImageMappingRepository;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;
import java.util.UUID;

@Service
public class ProfileImageService {

    @Value("${profile.image.upload.dir}") // 파일 업로드 디렉터리
    private String uploadDir;

    private final MemberRepository memberRepository;
    private final FileMetadataRepository fileMetadataRepository;
    private final ProfileImageMappingRepository profileImageMappingRepository;

    public ProfileImageService(MemberRepository memberRepository,
                               FileMetadataRepository fileMetadataRepository,
                               ProfileImageMappingRepository profileImageMappingRepository) {
        this.memberRepository = memberRepository;
        this.fileMetadataRepository = fileMetadataRepository;
        this.profileImageMappingRepository = profileImageMappingRepository;
    }

    @Transactional
    public void updateProfileImage(String memberId, MultipartFile file) throws IOException, java.io.IOException {
        // 파일 유효성 검사
        validateFile(file);

        // 회원 정보 조회
        Member member = memberRepository.findById(memberId)
                .orElseThrow(() -> new MemberNotFoundException("Member not found: " + memberId));

        // 고유 파일 이름 생성 및 파일 저장
        String originalFilename = Optional.ofNullable(file.getOriginalFilename()).orElse("unknown");
        String safeFileName = UUID.randomUUID() + "_" + originalFilename;
        Path filePath = Paths.get(uploadDir, safeFileName);
        Files.createDirectories(filePath.getParent()); // 디렉터리 생성
        file.transferTo(filePath.toFile()); // 파일 저장

        // 파일 메타데이터 데이터베이스에 저장
        FileMetadata fileMetadata = new FileMetadata();
        fileMetadata.setFileName(safeFileName);
        fileMetadata.setFilePath(filePath.toString());
        fileMetadata.setFileType(file.getContentType());
        fileMetadata = fileMetadataRepository.save(fileMetadata);

        // ProfileImageMapping 업데이트
        ProfileImageMapping profileImageMapping = profileImageMappingRepository.findByMember(member)
                .orElse(new ProfileImageMapping());
        profileImageMapping.setMember(member);
        profileImageMapping.setFile(fileMetadata);
        profileImageMappingRepository.save(profileImageMapping);
    }

    public Resource getProfileImage(String memberId) throws IOException {
        // 회원 정보 조회
        Member member = memberRepository.findById(memberId)
                .orElseThrow(() -> new MemberNotFoundException("Member not found: " + memberId));

        // 프로필 이미지 매핑 정보 조회
        ProfileImageMapping profileImageMapping = profileImageMappingRepository.findByMember(member)
                .orElseThrow(() -> new RuntimeException("Profile image not found for member: " + memberId));

        // 파일 경로에서 이미지 로드
        Path filePath = Paths.get(profileImageMapping.getFile().getFilePath());
        if (!Files.exists(filePath) || !Files.isReadable(filePath)) {
            throw new IOException("File not found or not readable: " + filePath);
        }

        // 파일 리소스 반환
        return new UrlResource(filePath.toUri());
    }

    private void validateFile(MultipartFile file) {
        // 파일이 비어있는지 확인
        if (file.isEmpty()) {
            throw new IllegalArgumentException("File is empty");
        }

        // 파일 타입 확인 (이미지 파일만 허용)
        if (!file.getContentType().startsWith("image/")) {
            throw new IllegalArgumentException("Invalid file type. Only image files are allowed.");
        }

        // 파일 크기 확인 (최대 5MB)
        if (file.getSize() > 5 * 1024 * 1024) { // 5MB 제한
            throw new IllegalArgumentException("File size exceeds the limit of 5 MB");
        }
    }
}
