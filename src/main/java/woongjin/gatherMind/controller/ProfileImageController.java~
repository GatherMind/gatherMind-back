package woongjin.gatherMind.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import woongjin.gatherMind.service.ProfileImageService;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/profile-image")
public class ProfileImageController {

    private final ProfileImageService profileImageService;

//    프로필 이미지 업로드
    @PostMapping("/upload")
    public ResponseEntity<String> uploadProfileImage(@RequestParam("file") MultipartFile file,
                                                     @RequestHeader("Authorization") String token) {
        try {
            String memberId = profileImageService.extractMemberIdFromToken(token); // JWT에서 memberId 추출
            profileImageService.saveProfileImage(file, memberId);
            return ResponseEntity.ok("프로필 이미지 업로드 성공");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("프로필 이미지 업로드 실패: " + e.getMessage());
        }
    }

//    프로필 이미지 조회
    @GetMapping
    public ResponseEntity<byte[]> getMemberProfileImage(@RequestHeader("Authorization") String authorizationHeader) {
        try {
            // JWT 토큰에서 memberId 추출
            String memberId = extractToken(authorizationHeader);

            // 프로필 이미지 가져오기
            byte[] imageBytes = profileImageService.getProfileImage(memberId);

            if (imageBytes != null && imageBytes.length > 0) {
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.IMAGE_JPEG); // 이미지 MIME 타입 설정
                return new ResponseEntity<>(imageBytes, headers, HttpStatus.OK);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(null); // 이미지가 없을 경우 404 응답
            }
        } catch (Exception e) {
            // 오류 발생 시 내부 서버 오류 응답
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(null);
        }
    }

//    프로필 이미지 삭제
    @DeleteMapping("/{memberId}")
    public ResponseEntity<String> deleteProfileImage(@PathVariable String memberId) {
        try {
            profileImageService.deleteProfileImage(memberId);
            return ResponseEntity.ok("프로필 이미지 삭제 성공");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("프로필 이미지 삭제 실패: " + e.getMessage());
        }
    }

//    헤더에서 토큰 추출
    private String extractToken(String authorizationHeader) {
        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            throw new IllegalArgumentException("유효하지 않은 Authorization 헤더입니다.");
        }
        // Bearer 토큰에서 JWT 추출
        return authorizationHeader.replace("Bearer ", "");
    }
}
