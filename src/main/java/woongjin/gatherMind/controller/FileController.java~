package woongjin.gatherMind.controller;

import jakarta.annotation.Resource;
import jakarta.servlet.http.HttpServletRequest;
import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import woongjin.gatherMind.config.JwtTokenProvider;
import woongjin.gatherMind.service.FileService;

@RestController
@RequestMapping("/api/files")
@AllArgsConstructor
public class FileController {

    private static final Logger logger = LoggerFactory.getLogger(FileController.class);

    private final FileService fileService;


//    @Operation(
//            summary = "파일 업로드"
//    )
//    @PostMapping("/upload")
//    public ResponseEntity<FileUploadResponseDTO> uploadFile(@RequestParam("file") MultipartFile file, @RequestParam("userId") String userId) {
//
//        FileUploadResponseDTO fileUploadResponseDTO = fileService.handleFileUpload(file, userId);
//        return ResponseEntity.status(HttpStatus.CREATED).body(fileUploadResponseDTO);
//    }

    @Autowired
    private JwtTokenProvider jwtTokenProvider;

    @PostMapping("/update-profile-image")
    public ResponseEntity<String> updateProfileImage(
            @RequestParam("file") MultipartFile file,
            HttpServletRequest request) {

        try {
            // JWT 토큰에서 사용자 ID 추출
            String memberId = jwtTokenProvider.extractMemberIdFromRequest(request);

            // 프로필 이미지 업데이트
            fileService.updateProfileImage(memberId, file);

            return ResponseEntity.ok("프로필 이미지가 성공적으로 업데이트되었습니다.");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("프로필 이미지 업데이트 중 오류 발생");
        }
    }

    @GetMapping("/profile-image")
    public ResponseEntity<Resource> getProfileImage(HttpServletRequest request) {
        try {
            // JWT 토큰에서 사용자 ID 추출
            String memberId = jwtTokenProvider.extractMemberIdFromRequest(request);

            // 사용자 프로필 이미지 반환
            Resource profileImage = fileService.getProfileImage(memberId);

            return ResponseEntity.ok()
                    .contentType(MediaType.IMAGE_PNG)
                    .body(profileImage);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

}
