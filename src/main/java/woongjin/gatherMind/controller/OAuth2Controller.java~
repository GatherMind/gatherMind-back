package woongjin.gatherMind.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.web.bind.annotation.*;
import woongjin.gatherMind.config.JwtTokenProvider;
import woongjin.gatherMind.entity.Member;
import woongjin.gatherMind.service.MemberService;

import java.util.Collections;

@RestController
@RequestMapping("/oauth2")
@RequiredArgsConstructor
public class OAuth2Controller {

    private final JwtTokenProvider jwtTokenProvider;
    private final MemberService memberService;

    /**
     * OAuth2 로그인 성공 후 호출되는 엔드포인트
     * 클라이언트가 전달한 토큰을 검증하고 유효하면 사용자 정보를 반환합니다.
     */
    public ResponseEntity<?> loginSuccess(@AuthenticationPrincipal OAuth2User oAuth2User) {
        try {
            // OAuth2User에서 사용자 정보 추출
            String email = oAuth2User.getAttribute("email"); // OAuth2 제공자가 제공하는 이메일 정보
            String name = oAuth2User.getAttribute("name");   // 이름 정보

            if (email == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("User information not found.");
            }

            // 사용자 정보 확인 및 처리
            Member member = memberService.findByMemberId(email);
            if (member == null) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
            }

            // JWT 토큰 생성
            String token = jwtTokenProvider.createToken(email);

            // 성공 응답으로 JWT 토큰 반환
            return ResponseEntity.ok(Collections.singletonMap("token", token));
        } catch (Exception e) {
            e.printStackTrace(); // 예외 로그 출력
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("OAuth2 로그인 처리 중 오류 발생: " + e.getMessage());
        }
    }

    /**
     * OAuth2 회원가입 처리 (선택적)
     * OAuth2를 통해 받은 정보를 바탕으로 신규 회원 등록을 처리합니다.
     */
    @PostMapping("/signup")
    public ResponseEntity<?> oauth2Signup(@RequestBody Member member) {
        try {
            memberService.signupFromOAuth2(member);
            return ResponseEntity.status(HttpStatus.CREATED).body("회원가입이 완료되었습니다.");
        } catch (Exception e) {
            // 로그 추가
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("회원가입 중 오류 발생: " + e.getMessage());
        }
    }
}
