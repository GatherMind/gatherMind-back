spring.application.name=gatherMind

#logging.level.org.springframework.security=DEBUG

# H2
#spring.datasource.url=jdbc:h2:file:./data/testdb;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.hibernate.ddl-auto=update

# AFTER created Table By JPA,  data.sql init
spring.jpa.defer-datasource-initialization=true

#JPA
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

# application.properties ?? ??
jwt.secret=YOUR_BASE64_ENCODED_SECRET_KEY

jwt.expiration=86400000
#session expiration
server.servlet.session.timeout=30m
#jwt expiration (session synchronize )(30*60*1000)
#jwt.expiration=1800000


server.port=8080
server.ssl.enabled=true
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=password
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=localhost


#file upload setting
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB



aws.s3.bucket=testbucket-2138977sd123
aws.s3.base-url=https://%s.s3.ap-northeast-2.amazonaws.com/
aws.region=ap-northeast-2
aws.accessKeyId=${AWS_ACCESS_KEY_ID}
aws.secretAccessKey=${AWS_SECRET_ACCESS_KEY}


#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

#google login setting
spring.security.oauth2.client.registration.google.client-id=435718461617-i6ccgnqic836u4ntkpavdfh136l6ep9f.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=profile, email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# GitHub login setting
spring.security.oauth2.client.registration.github.client-id=your-github-client-id
spring.security.oauth2.client.registration.github.client-secret=your-github-client-secret
spring.security.oauth2.client.registration.github.scope=user:email
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# Kakao login setting
spring.security.oauth2.client.registration.kakao.client-id=your-kakao-client-id
spring.security.oauth2.client.registration.kakao.client-secret=your-kakao-client-secret
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.registration.kakao.scope=account_email, profile_nickname
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# Naver login setting
spring.security.oauth2.client.registration.naver.client-id=78VDWqbvBWPeup1yYOHm
spring.security.oauth2.client.registration.naver.client-secret=kfxflnBrOz
spring.security.oauth2.client.registration.naver.client-name=Naver
spring.security.oauth2.client.registration.naver.scope=email, nickname
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response
